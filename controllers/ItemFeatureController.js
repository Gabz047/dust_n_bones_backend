import { Item, Feature, ItemFeature } from '../models/index.js';
import { v4 as uuidv4 } from 'uuid';

export default {
  // Criar associa√ß√£o item-caracter√≠stica
  async create(req, res) {
    try {
      const { itemId, featureId } = req.body;

      const item = await Item.findByPk(itemId);
      if (!item) return res.status(400).json({ success: false, message: 'Item n√£o encontrado.' });

      const feature = await Feature.findByPk(featureId);
      if (!feature) return res.status(400).json({ success: false, message: 'Caracter√≠stica n√£o encontrada.' });

      const existing = await ItemFeature.findOne({ where: { itemId, featureId } });
      if (existing) return res.status(400).json({ success: false, message: 'Item j√° possui essa caracter√≠stica.' });

      const itemFeature = await ItemFeature.create({ id: uuidv4(), itemId, featureId });

      return res.status(201).json({ success: true, data: itemFeature });
    } catch (error) {
      console.error('Erro ao criar associa√ß√£o item-caracter√≠stica:', error);
      return res.status(500).json({ success: false, message: 'Erro ao criar associa√ß√£o item-caracter√≠stica.' });
    }
  },

  // Buscar todas as associa√ß√µes item-caracter√≠stica
  async getAll(req, res) {
    try {
      const associations = await ItemFeature.findAll({
        include: [
          { model: Item, as: 'item', attributes: ['id', 'name'] },
          { model: Feature, as: 'feature', attributes: ['id', 'name'] }
        ],
        order: [['createdAt', 'DESC']]
      });

      return res.json({ success: true, data: associations });
    } catch (error) {
      console.error('Erro ao buscar associa√ß√µes item-caracter√≠stica:', error);
      return res.status(500).json({ success: false, message: 'Erro ao buscar associa√ß√µes item-caracter√≠stica.' });
    }
  },

  // Buscar associa√ß√£o pelo ID
  async getById(req, res) {
    try {
      const { id } = req.params;
      const association = await ItemFeature.findByPk(id, {
        include: [
          { model: Item, as: 'item', attributes: ['id', 'name'] },
          { model: Feature, as: 'feature', attributes: ['id', 'name'] }
        ]
      });

      if (!association) return res.status(404).json({ success: false, message: 'Associa√ß√£o n√£o encontrada.' });

      return res.json({ success: true, data: association });
    } catch (error) {
      console.error('Erro ao buscar associa√ß√£o item-caracter√≠stica:', error);
      return res.status(500).json({ success: false, message: 'Erro ao buscar associa√ß√£o item-caracter√≠stica.' });
    }
  },

  // Buscar todas as associa√ß√µes de um item espec√≠fico
  async getByItemId(req, res) {
    try {
      const { id } = req.params;

      const item = await Item.findByPk(id);
      if (!item) return res.status(404).json({ success: false, message: 'Item n√£o encontrado.' });

      const associations = await ItemFeature.findAll({
        where: { itemId: id },
        include: [{ model: Feature, as: 'feature', attributes: ['id', 'name'] }],
      });

      return res.json({ success: true, data: associations });
    } catch (error) {
      console.error('Erro ao buscar associa√ß√µes por item:', error);
      return res.status(500).json({ success: false, message: 'Erro ao buscar associa√ß√µes por item.' });
    }
  },

  // Atualizar associa√ß√£o
  async update(req, res) {
    try {
                  console.log('atualizando üóëÔ∏è')

      const { id } = req.params;
      const { featureId } = req.body;

      const association = await ItemFeature.findByPk(id);
      if (!association) return res.status(404).json({ success: false, message: 'Associa√ß√£o n√£o encontrada.' });

      if (featureId && featureId !== association.featureId) {
        const featureExists = await Feature.findByPk(featureId);
        if (!featureExists) return res.status(400).json({ success: false, message: 'Caracter√≠stica n√£o encontrada.' });

        const alreadyExists = await ItemFeature.findOne({ where: { itemId: association.itemId, featureId } });
        if (alreadyExists) return res.status(400).json({ success: false, message: 'Item j√° possui essa caracter√≠stica.' });

        association.featureId = featureId;
      }

      await association.save();
      return res.json({ success: true, data: association });
    } catch (error) {
      console.error('Erro ao atualizar associa√ß√£o item-caracter√≠stica:', error);
      return res.status(500).json({ success: false, message: 'Erro ao atualizar associa√ß√£o item-caracter√≠stica.' });
    }
  },

  // Deletar associa√ß√£o
  async delete(req, res) {
    try {
      const { id } = req.params;

      const association = await ItemFeature.findByPk(id);
      if (!association) return res.status(404).json({ success: false, message: 'Associa√ß√£o n√£o encontrada.' });
            console.log('deletando üóëÔ∏è')

      await association.destroy();
      return res.json({ success: true, message: 'Associa√ß√£o deletada com sucesso.' });
    } catch (error) {
      console.error('Erro ao deletar associa√ß√£o item-caracter√≠stica:', error);
      return res.status(500).json({ success: false, message: 'Erro ao deletar associa√ß√£o item-caracter√≠stica.' });
    }
  }
};
